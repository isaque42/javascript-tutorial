Boas práticas na programação:

1) Documentação
/**
 * Descrição do código (o que faz?)
 * @author Nome do autor do código
 * @link https://...
 */

2) Código limpo
- Não abusar de comentários

3) Nomeação:
   - Não usar caracteres especiais, espaço e acentos
   - Nomes de arquivos, variáveis, funções devem ser    escritos com a primeira letra em caixa baixa (letra minúscula), iniciar com caixa alta (letra maiúscula) apenas classes modelos.
   - definir nomes que tenham relação com o problema a ser resolvido.

4) Alinhamento (identação do código)

5) Quanto menos código usado para o problema melhor!

 ________________________________________________
 Comandos de terminal:

 cls ou clear (limpar a tela do terminal)
 node -v  (exibe a versão do node)
 cd pasta (entrar na pasta)
 cd .. (voltar um nível)
 dir ou ls (listar os arquivos e diretórios)
 node arquivo.js (executar um arquivo JavaScript)
 seta para cima (repete os comandos)
 <tab> completa o comandos

_________________________________________________
VSCode: Dicas
Combinação de teclas <alt><shift><f> //alinhamento
Mais dicas: VS Code: Produtividade Infinita (repositório)
_________________________________________________
JavaScript:

Características:
- Sentenças e não linhas de código
- ; é opcional
console.clear() //limpar a tela do console
console.log() //escrever no console
// comentários de linhas
Podemos usar aspas " " ou ' '
Não podemos usar aspas diferentes " ' ou ' "
Dica: Usar em textos "aspas"
      Usar em bibliotecas ou caminhos 'apóstrofe'

_________________________________________________
Operadores:

Observações:
- Regra de precedência
- % (não calcula porcentagem e sim o resto da divisão)
Ex:
    |  3
 10 |______
  1    3

10 / 3  //3.33
10 % 3  //resultado é 1

Comparadores de igualdade:
NÃO USAR == !=

Operadores lógicos:
Dica:
professorjosedeassis.github.io/simulador

________________________________________________
Estudo das variáveis:
- String (caracteres)
- Numéricas (números)
- Booleanas (verdadeiro ou falso)

Obs: No JS as variáveis são dinâmicamente tipadas
const (criar uma constante)
var ou let (criar uma variável)
ATENÇÃO!!! Não usar jamais o var

Tipagem dinâmica:
No JavaScript o tipo string é definico quando o contecúdo da variável estiver entre aspas ""

Variáveis numéricas podem ser números inteiros e não inteiros
Observação , (vírgula é um caractere e não número)
se necessário converter a entrada de dados de "," para "."
.replace(",",".")

Na entrada de dados númericos via terminal ou formulário é necessário converter para números
classe Number

__________________________________________________
Git e GitHub
Material de apoio:
https://www.youtube.com/playlist?list=PLbEOwbQR9lqzK14I7OOeREEIE4k6rjgIj

Configurando o git
 - Instalar o git
  -Abrir o git bash
  -git config --global user.name "seu nome"
  -git config --global user.email "seu email github"

git clone link_do_repositório (clonar o repositório na máquina local)

Observação: digitar os comandos na raiz do repositório
git status (verifica o status do repositório local em relação ao GitHub)
git add . (adiciona todas as alterações)
git commit -m "descrição das alterações"

__________________________________________________________________________________
NODE - Plataforma para uso do JS fora do browser(navegador)
 |_ V8 (google chromium)
 |_ bibliotecas c / c++
 |_ pacotes npm (node packager manager)
 npm ls (lista os pacotes)
 npm i ou npm install (instalaum pacote)
 npm r nome_do_pacote (remove o pacote)

 Pacote = Módulo = bibliotecas 
 Para usar um pacote é necessário fazer a importação no início do código (logo abaixo do cabeçalho de documentação)
 
 _____________________________________________________________________________________________________________________ 
 Algorítmo: "receita de bolo"

 Exemplo 1:
 Objetivo: Calcular a média de 2 notas

         nota 1 + nota 2
 média = ________________ 
                2

Variáveis: nota1,nota2,media

Entrada: nota1,nota2
Processamento: media = (nota1 + nota2) / 2 
Saída: media

________________________________________________
Exemplo 2:
Desenvolver um app modo cosole para cáculo de porcentagem:
Ex: 10% de 200 = 20
     x      y    valor

Algorítmo:     
2009(y) ------------ (y)100%
valor ----------  10%

valor x 100 = 200 x 10
         200(y) x (y)10             2000
valor = __________    valor = _____  valor = 20
            100               100

valor = (x * y) / 100

//variáveis
x,y,valor
//entrada
x,y

//Processamento
valor = (x * y) / 100

//Saída
valor

Exercício1 :
Desenvolver um app modo console para calcular o valor do desconto:
EX:
Valor total: 200.00
desconto: 5%
total com desconto: 190.00

valor com desconto = valor total -  desconto

// variáveis
total, desconto, valor,  totalDesconto

//Entrada
total, desconto

//processamento 1
valor = (desconto * total) / 100

//saída 1
valor

//processamento 2
totalDesconto = total - valor

//saída 2
totalDesconto

Exercício 2: Desenvolver um app no console para conersão de moeda (reals para euro)

cotação da moeda: 5.89

Para converter de real para euro, dividir o valor em reais pela cotação do euro

//variáveis
real, euro, total

//entrada
real, euro

//processamento 
total = real / euro

//saída
total





Estruturas de controle

condicionais:
if


Exercício 2: Desenvolver um app no console para conersão de moeda (reals para dolar)

cotação da moeda: 5.50

Para converter de real para dolar, dividir o valor em reais pela cotação do dolar

//variáveis
real, dolar, total

//entrada
real, dolar

//processamento 
total = real / dolar

//saída
total
_____________________________________________________________________________________________________________________
Exercicio Etanol ou gasolina

Algorítmo
O etanol vale a pena quando custar até 70% do valor da gasolina.

Variáveis:
etanol, gasolina

Entrada:
etanol, gasolina

Processamento/Saída
if(etanol < 0.7 * gasolina) {
  //abastecer com etanol
} else {
  //abastecer com gasolina
}



Exemplo de uso da estrutura else if
No exemplo cálculo da média, estabelecer as seguintes condições:
1) Se o aluno tiver média menor que 2 (REPROVADO)
2) Se a média do aluno estiver entre 2 e 5 (RECUPERAÇÃO)
3) Se a média for igual ou superior a 5 (APROVADO)

Resumindo:
if(condição 1) {
  //condição 1 verdadeira
  } else if(condição 2) {
    //condição 2 verdadeira
    } else if(condição 3) {
      //condição 3 verdadeira
      } else {
        //nenhuma das condições anteriores verdadeiras
        }

        obs: o else final não é obrigatório

        Exercício 3:
        No Brasil, o voto pode ser proibido , obrigatório ou facultativo, de acordo com os seguintes critérios:

        idade menor que 16 (proibido de votar) 
        idade entre 18 e 70 (incluido 18 e 70) o (voto é obrigatório)
        16, 17 ou acima de 70 (boto é opcional)

        Desenvolva no console do JS um APP para verificar em função da idade a obrigação ou não de votar.
        Testar com os valores 15(proibido), 16, 17(facultativo), 18,70 (obrigatório) e 71(facultativo)

        ----------------------------------------------------------------------------------------------------------
        Estrutura de controle condicional: switch-case
        Sintaxe:
        variável (número inteiro ou letra)
        switch(variável) {
          case: 1
            //código se o valor da variável for igual a 1 break
            case: 2
            //código se o valor da variável for igual a 2 
            break
            default:
              //código caso valor diferente de 1 ou 2 
              break
        }      

        --------------------------------------------------------------
        Exercício 4: Desenvolva no console do JS um aplicativo que faça o sorteio de um jogo de dado, ao resultado associar
        usando switch case a imagem da face do dado correspondente
        Exemplo:

       ⚀ - face 1
       ⚁ - face 2
       ⚂ - face 3
       ⚃ - face 3
       ⚄ - face 4
       ⚅ - face 5

       ______________________________________________________________________________________________________________________________
       Estruturas de controle - laços de repetições
       for
       while
       do-while

       for - estrutura de repetição finitas(determina)

       for (let i=1; condição; incremento/decremento) {
           //início; repetir enquanto condições verdadeiras; i++ ou i--
       }

       //obs: a variável declarada dentro das estruturas deve ser um número inteiro  
       ----------------------------------------------------------------------------------------
       Interiro


       Exercícios 5:
       5.1 Escreva um código que some todos os números de 1 a 100 e exibe o resultado no console.

       5.2Escreva um código que use um laço for para contar quantos números pares existem de 1 a 20. 

       while  do-while - estruturas de repetições infinitas 

       while (condição) {
          // analisa a condição e  executa o código enquanto a condição for verdadeira
       } 


      do {
         // sempre executa o código uam vez indenpedente da condição, depois se comporta cm while
       } while(condição)   

       Exercício 6:
       Desenvolver um aplicativo para caucular a tabuada, semelhante ao exemplo de aula usando a estrutura while no lugar do for

       
 Funções:
 Uma função é um bloco de código que realiza uma tarefa específica ou caucula um valor.
 Você pode pensar nela como uma "receita"  que você escreve uma vez e pode usar várias vezes, sem precisar rescrever o código.


nomeie funções de acordo com o problema a ser resolvido Use(verbos) para nomear funções. Ex: calcular() cadastrar()

 Para criar uma função simples(literal) usamos a palavra reservada function, e escolhemos um nome, conforme
sintaxe abaixo:

function nome() {
  //código
}

Para executar uma função devemos escrever o nome da função seguido de parêtense:
nome()

// variáveis
Tipos primitivos: string, number, boolean
Outros tipos: function, object

// Funções em JavaScript

- literais (nome)
- atribuídas (variáveis) "Função anônima"
São funções atribuidas a uma constate ou variável onde o resultado do processamento da função é armazenada
e pode ser utilizado, além disso funções atribuidas podem ser simplificadas
(arrow function)

Atividade 3 (Avaliação em dupla)
Desenvolver uma calculadora no console usando funções conforme o modelo abaixo:

Calculadora:
Digite o primeiro número: 10
Digite o segundo número: 2
Opções:
1. Somar
2. Subtrair
3. Multiplicar
4. Dividir 
5. Calcular a porcentagem 

Digite a opção desejada: 3
A multiplicação de 10 x 2 = 20
__________________________________________________________________________________
POO

- Abstração (classe modelo)
- Herança
- Polimorfismo

- Encapsulamento (segurança)
Slides de apoio: (49 a 60)
https://professorjosedeassis.github.io/javaSE/#/56

Obs: Para criar uma classe modelo usamos uma letra maiúscula no ínicio

No JS a clase modelo é uma função

Sempre que existir a palavra new um objeto é criado (instanciado) 

O ponto após o objeto é usado para acessar os recursos (atributos e métodos) da classe modelo

Polimorfismo:
Atenção! Para escrever um método é necessãrio uasr o "MESMO" nome do método original

Atividade 4: Avaliação individual
Slides 16 a 20 (POO Exercicío 1 - carros)

Encapsulamento:
- Reforço na segurança dos atributos(variáveis)
Dica: get e set (acesso a variável encapsulada)

        
            



